// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Peep.Parrot.Infrastructure.Data;

namespace Peep.Parrot.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Peep.Parrot.Domain.Entities.Block", b =>
                {
                    b.Property<Guid>("BlockerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlockedId")
                        .HasColumnType("uuid");

                    b.HasKey("BlockerId", "BlockedId");

                    b.ToTable("Block");
                });

            modelBuilder.Entity("Peep.Parrot.Domain.Entities.Followship", b =>
                {
                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowedId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean");

                    b.HasKey("FollowerId", "FollowedId");

                    b.ToTable("Followship");
                });

            modelBuilder.Entity("Peep.Parrot.Domain.Entities.Mute", b =>
                {
                    b.Property<Guid>("MuterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MutedId")
                        .HasColumnType("uuid");

                    b.HasKey("MuterId", "MutedId");

                    b.ToTable("Mute");
                });

            modelBuilder.Entity("Peep.Parrot.Domain.Entities.Peep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(280)
                        .HasColumnType("character varying(280)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReplyRestriction")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("Peep");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Peep");
                });

            modelBuilder.Entity("Peep.Parrot.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<bool>("IsPrivateAccount")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("PeepId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PeepId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PeepId");

                    b.HasIndex("PeepId1");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Peep.Parrot.Domain.Entities.Quote", b =>
                {
                    b.HasBaseType("Peep.Parrot.Domain.Entities.Peep");

                    b.Property<Guid?>("PeepId")
                        .HasColumnType("uuid");

                    b.HasIndex("PeepId");

                    b.HasDiscriminator().HasValue("Quote");
                });

            modelBuilder.Entity("Peep.Parrot.Domain.Entities.Reply", b =>
                {
                    b.HasBaseType("Peep.Parrot.Domain.Entities.Peep");

                    b.Property<Guid?>("PeepId")
                        .HasColumnType("uuid")
                        .HasColumnName("Reply_PeepId");

                    b.HasIndex("PeepId");

                    b.HasDiscriminator().HasValue("Reply");
                });

            modelBuilder.Entity("Peep.Parrot.Domain.Entities.Block", b =>
                {
                    b.HasOne("Peep.Parrot.Domain.Entities.User", "Blocker")
                        .WithMany("Blocks")
                        .HasForeignKey("BlockerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blocker");
                });

            modelBuilder.Entity("Peep.Parrot.Domain.Entities.Followship", b =>
                {
                    b.HasOne("Peep.Parrot.Domain.Entities.User", "Follower")
                        .WithMany("Followships")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Peep.Parrot.Domain.Entities.Mute", b =>
                {
                    b.HasOne("Peep.Parrot.Domain.Entities.User", "Muter")
                        .WithMany("Mutes")
                        .HasForeignKey("MuterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Muter");
                });

            modelBuilder.Entity("Peep.Parrot.Domain.Entities.Peep", b =>
                {
                    b.HasOne("Peep.Parrot.Domain.Entities.User", "User")
                        .WithMany("Peeps")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Peep.Parrot.Domain.Entities.User", b =>
                {
                    b.HasOne("Peep.Parrot.Domain.Entities.Peep", null)
                        .WithMany("Likes")
                        .HasForeignKey("PeepId");

                    b.HasOne("Peep.Parrot.Domain.Entities.Peep", null)
                        .WithMany("Rps")
                        .HasForeignKey("PeepId1");
                });

            modelBuilder.Entity("Peep.Parrot.Domain.Entities.Quote", b =>
                {
                    b.HasOne("Peep.Parrot.Domain.Entities.Peep", null)
                        .WithMany("Quotes")
                        .HasForeignKey("PeepId");
                });

            modelBuilder.Entity("Peep.Parrot.Domain.Entities.Reply", b =>
                {
                    b.HasOne("Peep.Parrot.Domain.Entities.Peep", null)
                        .WithMany("Replies")
                        .HasForeignKey("PeepId");
                });

            modelBuilder.Entity("Peep.Parrot.Domain.Entities.Peep", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Quotes");

                    b.Navigation("Replies");

                    b.Navigation("Rps");
                });

            modelBuilder.Entity("Peep.Parrot.Domain.Entities.User", b =>
                {
                    b.Navigation("Blocks");

                    b.Navigation("Followships");

                    b.Navigation("Mutes");

                    b.Navigation("Peeps");
                });
#pragma warning restore 612, 618
        }
    }
}
